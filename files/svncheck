#!/bin/bash
#####################
# Managed by Puppet #
#####################
# svncheck
# https://github.com/ballestr/puppet-vcscheck
# Usage: Check the status of VCS directory
#
# Author: saqib.haleem
# Version: 1.0  18.8.2010
# Update: 1.1 for /etc/svncheck
# sergio.ballestrero 2011-01-21 
# Update: 1.2 for http upload, /etc/svncheck/*
# sergio.ballestrero 2013-08-09 
# Update: 1.3 for autoupdate and source checks
# sergio.ballestrero 2013-11-03 
# Update: 1.4 for create
# sergio.ballestrero 2013-12-17 
# Update: 1.5 send email if output not interactive else output to screen
# chlee 2014-11-20
# Update: 1.6 single email for updates, with paths
# sergio.ballestrero 2015-01-24

# MYNAME=`readlink -f  "$0"` # -f fails on OsX
MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" #"#confusedmcedit
MYNAME="$MYDIR/$(basename ${BASH_SOURCE[0]})"
SPREAD=10
MAIL_CMD="/usr/sbin/sendmail -t"
USERMAIL=$(mktemp /tmp/vcscheck.XXXXXXXXXX)   # mail text
UPDATEMAIL=$(mktemp /tmp/vcscheck.XXXXXXXXXX)   # mail text
FROMROOT="<root@$(hostname -f)>"
SYSADMINS="root" # not @localhost, ssmtp does not remap it nicely
REPLYTO=$SYSADMINS
export SVN_SSH="ssh -q -o StrictHostKeyChecking=no"

if [ "$1" = "-update" ]; then
   DO_UPDATE=true
   shift
fi

if [ "$1" = "-create" ]; then
   DO_CREATE=true
   DO_EXITCODE=true
   shift
fi

TYPE="svn"
if [ $# -eq 0 ]; then
    shopt -s nullglob
    CONFIGS="/etc/vcscheck/${TYPE}_*.rc"
else
    CONFIGS="$@"
fi

source $MYDIR/vcslib.sh || source /usr/local/bin/vcslib.sh || exit 1

FAILS=0
for F in $CONFIGS; do
    MAILTO=""
    source $F || continue
    [ "$MAILTO" ] || MAILTO=$SYSADMINS
    CONF=$(basename $F)
    FAIL=0

    ## Actually one single dir, but helps flow control with continue
    for VCS_DIR in $DIR; do

        if [ -z "$VCS_DIR" ] ;  then
            # quietly skip empty
            continue
        fi

        if ! vcs_isvcsdir; then
            if [ -n "$DO_CREATE" -a -n "$SOURCE" ]; then
                ## if not empty, move aside
                [ "ls -A $VCS_DIR" ] && mv $VCS_DIR $VCS_DIR.pre_vcscheck
                vcs_create
            fi
        fi

        # must cd to the path, else git status fails, svn status fails if it is a link
        if ! cd $VCS_DIR/ 2>/dev/null ;  then
            echo "## $CONF: $VCS_DIR is not accessible." >> $USERMAIL
            FAIL=1
            continue
        fi

        if ! vcs_checkdir; then
            FAIL=1
            continue
        fi

        vcs_getsrc

        if [ -n "$SOURCE" ];  then
            if [ "$VCSSRC" != "$SOURCE" ]; then
                echo "## $CONF: $VCS_DIR source '$VCSSRC'">> $USERMAIL
                echo "## $CONF: $VCS_DIR does not match '$SOURCE'." >> $USERMAIL
                FAIL=1 # but do not skip status/update check anyway
            fi
        fi

        # let's not hammer the server if running from batch...
        [[ -t 0 || -p /dev/stdin || -n "$SSH_CONNECTION" ]] || sleep $[RANDOM%SPREAD]
        if [ "$AUTOUPDATE" == "true" -a -n "$DO_UPDATE" ]; then
            ## Check if running interactive, else send output to email
            if [[ -t 0 || -n "$SSH_CONNECTION" ]]; then 
                vcs_update
            else
                vcs_update >> $UPDATEMAIL
            fi
        fi
        vcs_checkstatus
    done

    ## Notifications
    if [ $FAIL -ne 0 ]; then
        vcsnotify $CONF $USERMAIL
        if [[ -t 0 || -n "$SSH_CONNECTION" ]] ; then
            cat $USERMAIL
            echo ""
        else
            if [ -z "$PUPSRV" ]; then 
                ## send mail if no report server defined
                cat $USERMAIL | mail -s "[VCSCHECK] errors on $(hostname -s) $CONF" $MAILTO
            fi
        fi
    else
        vcsnotify $CONF OK
    fi

    cat /dev/null > $USERMAIL
    FAILS=$[FAILS+FAIL]
done

if [ -s $UPDATEMAIL ] ; then
{
    cat $UPDATEMAIL 
    echo "---"
    echo "Mail sent by $MYNAME $CONFIGS running on $(hostname)"
}| mail -s "[VCSCHECK] updates on $(hostname -s)"  $MAILTO
fi

rm $USERMAIL $UPDATEMAIL

## exit code, especially for puppet -create
[ -n "$DO_EXITCODE" -a $FAILS -ne 0 ] && exit 1
exit 0
