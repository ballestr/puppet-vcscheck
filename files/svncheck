#!/bin/bash
#####################
# Managed by Puppet #
#####################
# svncheck
# Usage: Check the status of SVN directory
# Author: saqib.haleem
# Version: 1.0  18.8.2010
# Update: 1.1 for /etc/svncheck
# sergio.ballestrero 2011-01-21 
# Update: 1.2 for http upload, /etc/svncheck/*
# sergio.ballestrero 2013-08-09 
# Update: 1.3 for autoupdate and source checks
# sergio.ballestrero 2013-11-03 
# Update: 1.4 for create
# sergio.ballestrero 2013-12-17 
# Update: 1.5 send email if output not interactive else output to screen
# chlee 2014-11-20
# Update: 1.6 single email for updates, with paths
# sergio.ballestrero 2015-01-24

MY_NAME=`readlink -f  "$0"`
SPREAD=10
MAIL_CMD="/usr/sbin/sendmail -t"
USERMAIL=$(mktemp /tmp/vcscheck.XXXXXXXXXX)   # mail text
UPDATEMAIL=$(mktemp /tmp/vcscheck.XXXXXXXXXX)   # mail text
FROMROOT="<root@$(hostname -f)>"
SYSADMINS="root" # not @localhost, ssmtp does not remap it nicely
REPLYTO=$SYSADMINS
export SVN_SSH="ssh -q -o StrictHostKeyChecking=no"

if [ "$1" = "-update" ]; then
   DO_UPDATE=true
   shift
fi

if [ "$1" = "-create" ]; then
   DO_CREATE=true
   shift
fi

if [ $# -eq 0 ]; then
    shopt -s nullglob
    CONFIGS="/etc/vcscheck/svn_*.rc"
else
    CONFIGS="$@"
fi

function svn_checkstatus() {
    CHECK_STATUS=`svn status -u 2>&1 | sed -e '/^Status/ d'` 2>/dev/null
    R=${PIPESTATUS[0]}
    if [ "$CHECK_STATUS" == "" ]; then
        echo "## $CONF: $VCS_DIR status -u ok" >> $USERMAIL
    elif [[ "$CHECK_STATUS" =~ "Network connection" ]]; then
        echo -e "## $CONF: network connection failure (s=$CHECK_STATUS):" >> $USERMAIL
        svn info | grep "^Repository Root:" | sed -e 's/^/-- /' >> $USERMAIL
        FAIL=1
    else
        echo -e "## $CONF: $VCS_DIR is not in sync (r=$R):" >> $USERMAIL
        svn status -u 2>&1 | sed -e 's/^/-- /' >> $USERMAIL
        FAIL=1
    fi
}

function svn_update() {
    res=$(svn update | grep -v "At revision")
    if [ "$res" ]; then
        echo "## $CONF: updated $VCS_DIR from $VCSSRC"
        echo "$res"
    fi
}

function svn_create() {
    echo "## $CONF: checkout $SOURCE $VCS_DIR"
    svn checkout $SOURCE $VCS_DIR
}

function svn_checkdir() {
    if [ ! -d $VCS_DIR/.svn ];  then
        echo "## $CONF: $VCS_DIR is not an SVN working directory." >> $USERMAIL
        return 1
    fi
}

FAILS=0
for F in $CONFIGS; do
    MAILTO=""
    source $F || continue
    [ "$MAILTO" ] || MAILTO=$SYSADMINS
    CONF=$(basename $F)
    FAIL=0

    ## Actually one single dir, but helps flow control with continue
    for VCS_DIR in $DIR; do

        if [ -z "$VCS_DIR" ] ;  then
            # quietly skip empty
            continue
        fi

        if ! [ -e "$VCS_DIR" -a -e "$VCS_DIR/.svn" ]; then
            if [ -n "$DO_CREATE" -a -n "$SOURCE" ]; then
                ## if not empty, move aside
                [ "ls -A $VCS_DIR" ] && mv $VCS_DIR $VCS_DIR.pre_vcscheck
                svn_create
            fi
        fi
        # must cd to the path, else svn status fails if it is a link
        if ! cd $VCS_DIR/ 2>/dev/null ;  then
            echo "## $CONF: $VCS_DIR is not accessible." >> $USERMAIL
            FAIL=1
            continue
        fi

        if ! svn_checkdir;  then
            FAIL=1
            continue
        fi

        #VCSSRC=$(cd $VCS_DIR; svn info)
        VCSSRC=$(cd $VCS_DIR; svn info | grep '^URL:' | cut -d' ' -f2)
        # OLD? VCSSRC=$(head .svn/entries | egrep "^svn.*:" | head -1)

        if [ -n "$SOURCE" ];  then
            if [ "$VCSSRC" != "$SOURCE" ]; then
                echo "## $CONF: $VCS_DIR source '$VCSSRC'">> $USERMAIL
                echo "## $CONF: $VCS_DIR does not match '$SOURCE'." >> $USERMAIL
                FAIL=1 # but do not skip status/update check anyway
            fi
        fi

        # let's not hammer the server if running from batch...
        [[ -t 0 || -p /dev/stdin || -n "$SSH_CONNECTION" ]] || sleep $[RANDOM%SPREAD]
        if [ "$AUTOUPDATE" = "true" -a -n "$DO_UPDATE" ]; then
            ## Check if running interactive, else send output to email
            if [ -t 0 ]; then 
                svn_update
            else
                svn_update >> $UPDATEMAIL
            fi
        fi
        svn_checkstatus
    done

    ## Notifications
    if [ $FAIL -ne 0 ]; then
        vcsnotify $CONF $USERMAIL
        if [ -t 0 ] ; then
            cat $USERMAIL
        else
            if [ -z "$PUPSRV" ]; then 
                ## send mail if no report server defined
                cat $USERMAIL | mail -s "[VCSCHECK] errors on $(hostname -s) $CONF" $MAILTO
            fi
        fi
    else
        vcsnotify $CONF OK
    fi

    cat /dev/null > $USERMAIL
    FAILS=$[FAILS+FAIL]
done

if [ -s $UPDATEMAIL ] ; then
{
    cat $UPDATEMAIL 
    echo "---"
    echo "Mail sent by $MY_NAME $CONFIGS running on $(hostname)"
}| mail -s "[SVNCHECK] updates on $(hostname -s)"  $MAILTO
fi

rm $USERMAIL $UPDATEMAIL

## exit code, especially for puppet
[ $FAILS -ne 0 ] && exit 1
exit 0
