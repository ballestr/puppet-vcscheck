#!/bin/bash
#######################
## Managed by Puppet ##
#######################
## puppetfile: modules/vcscheck/vcscheck
#
# From https://github.com/ballestr/puppet-vcscheck
# Check the status of Version Control System directory
#
# Author: saqib.haleem
# Version: 1.0  18.8.2010
# Update: 1.1 for /etc/svncheck
# sergio.ballestrero 2011-01-21 
# Update: 1.2 for http upload, /etc/svncheck/*
# sergio.ballestrero 2013-08-09 
# Update: 1.3 for autoupdate and source checks
# sergio.ballestrero 2013-11-03 
# Update: 1.4 for create
# sergio.ballestrero 2013-12-17 
# Update: 1.5 send email if output not interactive else output to screen
# chlee 2014-11-20
# Update: 1.6 single email for updates, with paths
# sergio.ballestrero 2015-01-24
# Update: 2.0 version for Git
# sergio.ballestrero 2017-05
# Update: 2.1 version merged to support both SVN and Git
# sergio.ballestrero 2017-12
# Update: 2.2 refactor for Nagios/Icinga2 usage
# sergio.ballestrero 2017-12
# Update: 2.3 warn instead of fail, if recent files present
# sergio.ballestrero 2017-12

#[[ -t 0 || -n "$SSH_CONNECTION" ]] || set ## debug for cron

# MYNAME=`readlink -f  "$0"` # -f fails on OsX
MYDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" #"#confusedmcedit
MYNAME="$MYDIR/$(basename ${BASH_SOURCE[0]})"
SPREAD=10
MAIL_CMD="/usr/sbin/sendmail -t"
USERMAIL=$(mktemp /tmp/vcscheck.XXXXXXXXXX)   # mail text
UPDATEMAIL=$(mktemp /tmp/vcscheck.XXXXXXXXXX)   # mail text
FROMROOT="<root@$(hostname -f)>"
SYSADMINS="root" # not @localhost, ssmtp does not remap it nicely
REPLYTO=$SYSADMINS
export SVN_SSH="ssh -q -o StrictHostKeyChecking=no"

## Set defaults
DO_REMOTE=true
if [[ -t 0 || -n "$SSH_CONNECTION" ]]; then
    DO_QUIET=""
    DO_MAIL=""
else
    DO_MAIL=true
    DO_QUIET=true
fi

## process options
CMDLINE="$@"
while [[ "$1" =~ ^- ]]; do
    case "$1" in
    -update)  DO_UPDATE=true;;
    --update) DO_UPDATE=true;;
    -create)  DO_CREATE=true;DO_EXITCODE=true;; ## exitcode for puppet
    --create) DO_CREATE=true;DO_EXITCODE=true;; ## exitcode for puppet
    --local)  DO_REMOTE=;; ## disable remote checks
    --exitcode) DO_EXITCODE=true;;
    --nagios) DO_NAGIOS=true;;
    --icinga) DO_NAGIOS=true;; # icinga support ;-) 
    --quiet) DO_QUIET=true;;
    esac
    shift
done
[ -n "$DO_CREATE" ] && DO_UPDATE=true ## force update on create
[ -n "$DO_UPDATE" ] && DO_REMOTE=true ## force remote check on update
[ -n "$DO_NAGIOS" ] && { DO_EXITCODE=true;DO_REMOTE=;DO_UPDATE=;DO_MAIL=;DO_QUIET=;echo "## vcscheck servicecheck mode"; }

if [ $# -eq 0 ]; then
    shopt -s nullglob
    CONFIGS="/etc/vcscheck/*.rc"
    CONFIGS+=" $HOME/.config/vcscheck/*.rc"
else
    CONFIGS="$@"
fi

source $MYDIR/vcslib.sh || source /usr/local/bin/vcslib.sh || exit 1

function vcsprocessdir() {
    local VCS_DIR=$1
    if [ -z "$VCS_DIR" ] ;  then
        echo "## $CONF: empty DIR='$VCS_DIR' (warning)."
        WARN=1
        return
    fi

    if ! vcs_isvcsdir; then
        if [ -n "$DO_CREATE" -a -n "$SOURCE" ]; then
            ## if not empty, move aside
            [ "ls -A $VCS_DIR" ] && mv $VCS_DIR $VCS_DIR.pre_vcscheck
            vcs_create
        fi
    fi

    # must cd to the path, else git status fails, svn status fails if it is a link
    if ! cd $VCS_DIR/ 2>/dev/null ;  then
        if [ $(id -ru) -eq 0 ]; then
            echo "## $CONF: $VCS_DIR is not accessible."
            FAIL=1
        else
            echo "## $CONF: $VCS_DIR is not accessible (non-root warning)."
            WARN=1
        fi
        return
    fi
    # echo "## $CONF: entering $VCS_DIR" ## debug

    if ! vcs_checkdir; then
        FAIL=1
        return
    fi

    vcs_getsrc

    if [ -n "$SOURCE" ];  then
        if [ "$VCSSRC" != "$SOURCE" ]; then
            echo "## $CONF: $VCS_DIR source '$VCSSRC'"
            echo "## $CONF: $VCS_DIR does not match '$SOURCE'."
            FAIL=1 # but do not skip status/update check anyway
        fi
    fi

    # let's not hammer the server if running from batch...
    [[ -t 0 || -p /dev/stdin || -n "$SSH_CONNECTION" ]] || sleep $[RANDOM%SPREAD]
    # when running on directories, AUTOUPDATE will be "", so updates will be done
    if [ "$AUTOUPDATE" != "false" -a -n "$DO_UPDATE" ]; then
        ## Check if running interactive, else send output to email
        if [ -n "$DO_MAIL" ]; then 
            vcs_update >> $UPDATEMAIL
        else
            vcs_update
        fi
    fi
    vcs_checkstatus
    #echo "## $CONF: processdir fail=$FAIL warns=$WARN" ## debug

    ## give some grace for recently modified files
    if [ $FAIL -ne 0 ]; then
        local tmax=120
        rf=$(find $VCS_DIR -name .git -prune -o -name .svn -prune -o -mmin -$tmax -type f -print) ## do not forget the -print or -ls with prune
        if [ "$rf" ]; then
            echo "## $CONF: recently modified files present (<${tmax}m), WARNING only:"
            find . -name .git -prune -o -name .svn -prune -o -mmin -$tmax -type f -print |\
            xargs ls -lat | head -n10| sed 's/^/--/'
            WARN=$[WARN+$FAIL]
            FAIL=0
        fi
    fi
    [ $FAIL -ne 0 -o $WARN -ne 0 ] && echo "--" ## separator line
}

FAILS=0
WARNS=0
PWD0=$PWD
for F in $CONFIGS; do
    cd $PWD0 || exit 1
    ## clear settings
    TYPE=""
    DIR=""
    MAILTO=""
    SOURCE=""
    CREATE=""
    AUTOUPDATE=""
    if [ -d $F ]; then
        [ "$DO_QUIET" ] || echo "## entering directory $F"
        CONF=$(basename $F)
        DIR=$(cd $F && pwd)
        AUTOUPDATE="true"
    else
        source $F || continue
        CONF=$(basename $F .rc)
    fi
    [ "$MAILTO" ] || MAILTO=$SYSADMINS
    [ "$TYPE" ] || TYPE=git #default to git
    LOCAL=0
    REMOTE=0
    FAIL=0
    WARN=0

    if [ "$DO_QUIET" ]; then
        vcsprocessdir $DIR 2>&1 > $USERMAIL
    else
        vcsprocessdir $DIR 2>&1 > >(tee $USERMAIL) ## use process substitution to preserve global variables
    fi

    ## Notifications
    if [ $FAIL -ne 0 -o $WARN -ne 0 ]; then
        vcsnotify $CONF $USERMAIL
        if [ "$DO_MAIL" ] ; then
            cat $USERMAIL | mail -s "[VCSCHECK] errors on $(hostname -s) $CONF" $MAILTO
        fi
    else
        vcsnotify $CONF OK
    fi

    cat /dev/null > $USERMAIL
    FAILS=$[FAILS+FAIL]
    WARNS=$[WARNS+WARN]
done

if [ -s $UPDATEMAIL ] ; then
{
    cat $UPDATEMAIL 
    echo "---"
    echo "Mail sent by $MYNAME $CMDLINE running on $(hostname)"
}| mail -s "[VCSCHECK] updates on $(hostname -s)"  $MAILTO
fi

rm $USERMAIL $UPDATEMAIL

if [ -z "$DO_QUIET" ]; then
    echo "## $MYNAME '$CMDLINE' exit: fails=$FAILS warns=$WARNS local=$LOCAL remote=$REMOTE"
fi
## exit code, for Nagios/Icinga2 and for --create from puppet
if [ -n "$DO_EXITCODE" ]; then
    [ $FAILS -ne 0 ] && exit 2
    [ $WARNS -ne 0 ] && exit 1
fi
exit 0

